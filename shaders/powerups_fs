#version 330 core
out vec4 FragColor;

struct Light {
    vec3 position;  
    vec3 diffuse;	
    float constant;
    float linear;
    float quadratic;
    vec3 direction;
    float cutOff;
    float outerCutOff;
    vec3 specular;
};

in vec3 Color;
in vec3 Normal;  
in vec3 FragPos;  

uniform vec3 singleColor;
uniform Light light;
uniform float material_shininess;
uniform vec3 viewPos;

void main()
{  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * light.diffuse;

    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material_shininess);
    vec3 specular = spec * light.specular; 


    // spotlight (soft edges)
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = (light.cutOff - light.outerCutOff);
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // diffuse  *= intensity;
    // specular *= intensity;

    // attenuation
    float distance    = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    diffuse   *= attenuation;
    specular   *= attenuation;
            
    vec3 result = (diffuse + specular) * singleColor;
    FragColor = vec4(result, 1.0);
}